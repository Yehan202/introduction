# Apuntes

def getuser(a):
  name=""
  group=""
  uid=""
  for i in range(len(a)):
    if(a[i]=="-u"):
      name=a[i+1]
    if(a[i]=="-g"):
      group=a[i+1]
    if(a[i]=="-uid"):
       uid=a[i+1]
  return name,uid,group

a=["-uid","1024","-g","users","-u","Alice"]
name, uid, group = getuser(a)
print(f"name {name}, uid {uid}, group {group}")

a=["-u","Bob","-uid","1025","-g","users"]
name, uid, group = getuser(a)
print(f"name {name}, uid {uid}, group {group}")

# -------------------------

import sys

print(sys.argv)

for i in sys.argv:
    print(i)

for j in range(1,len(sys.argv)):
    print(sys.argv[j])

# ---------------------------------------

import sys

out=0.0

if sys.argv[1] == '-sum':
    out=float(sys.argv[2])+float(sys.argv[3])


if sys.argv[1] == '-rest':
    out=float(sys.argv[2])-float(sys.argv[3])

print(out)

# ------------------------------------------------

#python3.12.exe calc.py 8 -rest 9 -sum 7

import sys

out=float(sys.argv[1])

if sys.argv[2] == '-sum':
    out = out + float(sys.argv[3])

if sys.argv[2] == '-rest':
    out = out - float(sys.argv[3])

if sys.argv[4] == '-sum':
    out = out + float(sys.argv[5])

if sys.argv[4] == '-rest':
    out = out - float(sys.argv[5])

print(out)

#python3.12.exe calc.py 8 -rest 9 -sum 7 ....

import sys

out=float(sys.argv[1])

for j in range(2,len(sys.argv),2):
    if sys.argv[j] == '-sum':
        out = out + float(sys.argv[j+1])
    if sys.argv[j] == '-rest':
        out = out - float(sys.argv[j+1])

  
print(out)

# -----------------------------------------------------

#python3.12.exe calc.py 8 * 9 - 7 ....

import sys

out=float(sys.argv[1])

for j in range(2,len(sys.argv),2):
    if sys.argv[j] == '+':
        out = out + float(sys.argv[j+1])
    if sys.argv[j] == '-':
        out = out - float(sys.argv[j+1])
    if sys.argv[j] == '*':
        out = out - float(sys.argv[j+1])
    if sys.argv[j] == '/':
        out = out / float(sys.argv[j+1])

print(out)

# -------------------------------------------

#python3.12.exe calc.py 8 * 9 - 7 ....#hacer que  las * y / se hagan antes

#python3.12.exe calc.py 8 * 9 - 7 ....
#haz qye las multiplicaciones y divisiones se hagan antes

# python3.12.exe calc.py 4 + 2 * 4 + 4
#16.0
# python3.12.exe calc.py 4 + 2 / 4 + 4
#8.5

import sys

def  mul_div(lista):
    a=[]
    for j in range(2,len(lista)-1):
        if lista[j] == '*' or lista[j] == '/' :
            if lista[j] == '*':
                a.append(float(lista[j-1])*float(lista[j+1]))
            if lista[j] == '/':
                a.append(float(lista[j-1])/float(lista[j+1]))            
            j=j+1
        else:
            a.append(lista[j-1])                
    if lista[len(lista)-2] != '*' or lista[len(lista)-2] != '/':
        a.append(lista[len(lista)-2])
        a.append(lista[len(lista)-1]) 
    return a

def suma_resta(lista):
    out=float(lista[0])
    for j in range(1,len(lista),2):
        if lista[j] == '+':
            out = out + float(lista[j+1])
        if lista[j] == '-':
            out = out - float(lista[j+1])
    return out

aux=mul_div(sys.argv)
print(str(suma_resta(aux)))

# -------------------------------------------------------------------------

#python3.12.exe temp.py -T 23 -T 25.5 -T 30.0 -T 27.0 ....
#devuelve la media de las temperaturas
import sys
Tin=[]

for j in range(1,len(sys.argv)):
  if(sys.argv[j] == "-T") :
    Tin.append(float(sys.argv[j+1]))

print(Tin)
Tmed=0.0
for t in Tin:
  Tmed+=t

print(Tmed/len(Tin))

# ------------------------------------------------------------------

# Escribe un programa en Python que reciba una lista de temperaturas a través de la línea de comandos utilizando el siguiente formato:

# python3.12.exe temp.py -T 23 -T 25.5 -T 30.0 -T 27.0 ...

# Además, el programa debe recibir opcionalmente los parámetros -Tmax y -Tmin, los cuales indicarán los límites superior e inferior respectivamente. Las temperaturas que se encuentren fuera de este rango no deben ser tomadas en cuenta para el cálculo de la media, y el programa debe mostrar explícitamente cuáles son las temperaturas que se han descartado.

# El programa debe cumplir con los siguientes requisitos:

# Calcular y mostrar la media de las temperaturas que están dentro del rango permitido.
# Mostrar una lista de las temperaturas que no fueron utilizadas en el cálculo de la media (es decir, aquellas que están por encima de Tmax o por debajo de Tmin).
# Si no se proporcionan -Tmax o -Tmin, calcular la media utilizando todas las temperaturas.
# Ejemplo de ejecución:

# python3.12.exe temp.py -T 23 -T 25.5 -T 30.0 -T 27.0 -Tmax 28 -Tmin 24

# Temperaturas descartadas: 23, 30.0
# Temperatura media: 26.25


import sys
Tin=[]
T_min="null"
T_max="null"

for j in range(1,len(sys.argv)):
  if(sys.argv[j] == "-T") :
    Tin.append(float(sys.argv[j+1]))
  if(sys.argv[j] == "-Tmin") :
    T_min=float(sys.argv[j+1])
  if(sys.argv[j] == "-Tmax") :
    T_max=float(sys.argv[j+1])

Tmed=0.0
n=0
T_nousadas=[]

if T_min=="null":
  T_min=Tin[0]
  for t in Tin:
    if T_min > t:
      T_min=t

if T_max=="null":
  T_max=Tin[0]
  for t in Tin:
    if T_max < t:
      T_max=t

for t in Tin:
  if t < T_min or t > T_max:
    T_nousadas.append(t)
  else:
    Tmed+=t
    n+=1

print(Tmed/n)
print(T_nousadas)

# PS C:\Users\dani\Desktop\scripts> python3.12.exe temp.py -T 1 -T 2 -T 3 -T 4 -T 5 -T 6 -Tmin 3 -Tmax 4
# 3.5
# [1.0, 2.0, 5.0, 6.0]
# PS C:\Users\dani\Desktop\scripts> python3.12.exe temp.py -T 1 -T 2 -T 3 -T 4 -T 5 -T 6 -Tmin 3        
# 4.5
# [1.0, 2.0]
# PS C:\Users\dani\Desktop\scripts> python3.12.exe temp.py -T 1 -T 2 -T 3 -T 4 -T 5 -T 6        
# 3.5
# []

# --------------------------------------------------------

# Escribe un programa en Python que reciba una lista de capacidades de almacenamiento (por ejemplo, en TB, GB, KB) a través de la línea de comandos, utilizando el siguiente formato:

# python3.12.exe cap.py 0.5TB 500GB 4TB 100000KB -out GB

# El programa debe realizar las siguientes acciones:

# Sumar todas las capacidades especificadas, independientemente de las unidades en que se proporcionen. El programa debe ser capaz de manejar unidades en TB (terabytes), GB (gigabytes) y KB (kilobytes). Para la conversión de las unidades:

# 1 TB = 1012 GB
# 1 GB =  109 B
# 1 MB = 106 B
# 1 KB = 103 B
# Si no se especifica el parámetro opcional -out, el programa debe devolver la suma total en GB.
# Si se incluye el parámetro -out, el programa debe devolver la suma total en la unidad especificada (puede ser KB, MB, GB o TB).

# python3.12.exe cap.py 0.5TB 500GB 4TB 100000KB -out GB

# Total: 5000.097 GB

# python3.12.exe cap.py 0.5TB 500GB 4TB 100000KB -out TB

# Total: 5.0001 TB

# Solución

import sys

suma=0.0
unidad_salida="GB"

for i in range(1,len(sys.argv)):
    if (sys.argv[i]=='-out'):
        unidad_salida=sys.argv[i+1]
    else:  
        if sys.argv[i-1] != '-out':
            unidades=sys.argv[i][-2:]
            medida=float(sys.argv[i][:-2])
            if unidades=="KB":
                medida=medida/10**6
            if unidades=="MB":
                medida=medida/10**3
            if unidades=="GB":
                medida=medida
            if unidades=="TB":
                medida=medida*10**3        
    suma=suma+medida    


if unidad_salida == 'B':   
    print(f'{suma*10**9} ({unidad_salida})')

if unidad_salida == 'KB':   
    print(f'{suma*10**6} ({unidad_salida})')

if unidad_salida == 'MB':   
    print(f'{suma*10**3} ({unidad_salida})')
    
if unidad_salida == 'GB':   
    print(f'{suma} ({unidad_salida})')

if unidad_salida == 'TB':   
    print(f'{suma/10**3} ({unidad_salida})')

# --------------------------------------------------------

# Recibir una lista de usuarios y grupos con su uso de almacenamiento, el script debe aceptar múltiples usuarios o grupos en el formato:

# -u Nombre_Usuario Nombre_Grupo Tamaño

# Ejemplo de llamada:

#     python3 du.py -u Alice GA 20GB -u Bob GA 30GB -u Carol GB 15GB -u Jhon GB 20GB -u David GB 80GB -user/-group

# Opciones de visualización:

#     Filtrar por usuario (-user): Al usar esta opción, el script mostrará únicamente los datos agrupados por usuario ordeandos de mayor a menor tamaño
#     Filtrar por grupo (-group): Al usar esta opción, el script mostrará únicamente los datos agrupados por grupo ordeandos de mayor a menor tamaño

import sys

usuarios=[]
grupos=[]
tamaño=[]

for i in range(1,len(sys.argv)):
    if sys.argv[i] == '-u':
        usuarios.append(sys.argv[i+1])
        grupos.append(sys.argv[i+2])
        tamaño.append(sys.argv[i+3])

for i in range(1,len(sys.argv)):
    if sys.argv[i] == '-user':
        for j in range(len(usuarios)):
            print(f'El usuario: {usuarios[j]} tiene {tamaño[j]}')

          
grupos_sin_repetir=[]
tamaño_del_grupo=[]

for i in range(1,len(sys.argv)):
    if sys.argv[i] == '-group':
        for j in grupos:
            if grupos_sin_repetir.count(j) == 0:
                grupos_sin_repetir.append(j)
                tamaño_del_grupo.append(float(0.0))
        #print(grupos_sin_repetir)
        for g in range(len(grupos_sin_repetir)):
            #print("Es el grupo",g)
            for k in range(len(usuarios)):
                if(grupos_sin_repetir[g] == grupos[k]):
                    #print(f'El usuario: {usuarios[k]} tiene {tamaño[k]}')
                    tamaño_del_grupo[g]+=float(tamaño[k][:2])
                    #print(tamaño_del_grupo[g])

        for g in range(len(grupos_sin_repetir)):
            print(f'El grupo {grupos_sin_repetir[g]} tiene {tamaño_del_grupo[g]}GB')
                

# --------------

# python3.12.exe du.py -max 11500 -min 10000

import psutil
import sys

procesos=[]
for proc in psutil.process_iter(['pid', 'name', 'username']):
    try:
        aux=[]
        aux.append(proc.info['pid'])
        aux.append(proc.info['name'])
        aux.append(proc.info['username'])
        procesos.append(aux)
        #print(f"PID: {proc.info['pid']}, Nombre: {proc.info['name']}, Usuario: {proc.info['username']}")
    except (psutil.NoSuchProcess, psutil.AccessDenied):
        pass

min=10000
max=13000

for i in range(1,len(sys.argv)):
    if sys.argv[i] == '-min':
        min=int(sys.argv[i+1])
    if sys.argv[i] == '-max':
        max=int(sys.argv[i+1])


for i in procesos:
    if i[0] > min and i[0] < max:
        print(i)

# ----------------------------------------

#Crea un Script tep_cpu.py que me de la siguiente información:
# python3.12.exe temp_cpu.py -cpu -mem -disc -net 

import psutil
import sys

for i in range(1,len(sys.argv)):
    if sys.argv[i] == '-cpu':
        print("CPU:", psutil.cpu_percent(), "%")
    if sys.argv[i] == '-mem':
        print("Memoria:", psutil.virtual_memory().percent, "%")
    if sys.argv[i] == '-disc':
        print("Disco:", psutil.disk_usage('/').percent, "%")
    if sys.argv[i] == '-net':
        print("Network:", psutil.net_io_counters(pernic=False))

# Última modificación: miércoles, 30 de octubre de 2024, 10:11